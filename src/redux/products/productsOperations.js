import { createAsyncThunk } from "@reduxjs/toolkit";
import axios from "axios";

axios.defaults.baseURL = "https://admindashboard-back-qth7.onrender.com/api";

const getAuthHeader = () => {
  const token = localStorage.getItem("token");
  return token ? { headers: { Authorization: `Bearer ${token}` } } : {};
};

// üìå GET: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
export const fetchProducts = createAsyncThunk(
  "products/fetchAll",
  async (_, { rejectWithValue }) => {
    try {
      const response = await axios.get("/products", getAuthHeader());
      return response.data;
    } catch (error) {
      if (error.response?.status === 401) {
        console.warn("–¢—Ä–µ–±—É–µ—Ç—Å—è refreshToken, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
        return rejectWithValue("Refresh token required");
      }
      return rejectWithValue(error.response?.data || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤");
    }
  }
);

// üìå POST: –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
export const addProduct = createAsyncThunk(
  "products/add",
  async (productData, { rejectWithValue }) => {
    try {
      const response = await axios.post(
        "/products",
        productData,
        getAuthHeader()
      );
      return response.data;
    } catch (error) {
      return rejectWithValue(
        error.response?.data || "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"
      );
    }
  }
);

// üìå PUT: –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
export const updateProduct = createAsyncThunk(
  "products/update",
  async ({ id, productData }, { rejectWithValue }) => {
    try {
      const response = await axios.put(
        `/products/${id}`,
        productData,
        getAuthHeader()
      );
      return response.data;
    } catch (error) {
      return rejectWithValue(
        error.response?.data || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"
      );
    }
  }
);

// üìå DELETE: –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
export const deleteProduct = createAsyncThunk(
  "products/delete",
  async (id, { rejectWithValue }) => {
    try {
      await axios.delete(`/products/${id}`, getAuthHeader());
      return id;
    } catch (error) {
      return rejectWithValue(error.response?.data || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞");
    }
  }
);
