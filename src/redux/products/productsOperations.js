import { createAsyncThunk } from "@reduxjs/toolkit";
import api from "../axiosInstance"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π api

// üìå GET: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
export const fetchProducts = createAsyncThunk(
  "products/fetchAll",
  async (_, { rejectWithValue }) => {
    try {
      const response = await api.get("/products"); // –ò—Å–ø–æ–ª—å–∑—É–µ–º api
      return response.data;
    } catch (error) {
      if (error.response?.status === 401) {
        console.warn("–¢—Ä–µ–±—É–µ—Ç—Å—è refreshToken, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
        return rejectWithValue("Refresh token required");
      }
      console.error(
        "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:",
        error.response?.data || error.message
      );
      return rejectWithValue(error.response?.data || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤");
    }
  }
);

// üìå POST: –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
export const addProduct = createAsyncThunk(
  "products/add",
  async (productData, { rejectWithValue }) => {
    try {
      const response = await api.post("/products", productData); // –ò—Å–ø–æ–ª—å–∑—É–µ–º api
      return response.data;
    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:",
        error.response?.data || error.message
      );
      return rejectWithValue(
        error.response?.data || "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"
      );
    }
  }
);

// üìå PUT: –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
export const updateProduct = createAsyncThunk(
  "products/update",
  async ({ id, productData }, { rejectWithValue }) => {
    try {
      const response = await api.put(`/products/${id}`, productData); // –ò—Å–ø–æ–ª—å–∑—É–µ–º api
      return response.data;
    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:",
        error.response?.data || error.message
      );
      return rejectWithValue(
        error.response?.data || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"
      );
    }
  }
);

// üìå DELETE: –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
export const deleteProduct = createAsyncThunk(
  "products/delete",
  async (id, { rejectWithValue }) => {
    try {
      await api.delete(`/products/${id}`); // –ò—Å–ø–æ–ª—å–∑—É–µ–º api
      return id; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:",
        error.response?.data || error.message
      );
      return rejectWithValue(error.response?.data || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞");
    }
  }
);
