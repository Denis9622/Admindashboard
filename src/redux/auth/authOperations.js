import { createAsyncThunk } from "@reduxjs/toolkit";
import api from "../axiosInstance"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π api
import { setAuthHeader } from "../axiosInstance";

// üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const registerUser = createAsyncThunk(
  "auth/register",
  async (userData, { rejectWithValue }) => {
    try {
      const response = await api.post("/auth/register", userData);
      const { id, name, email, accessToken } = response.data.data;

      localStorage.setItem("user", JSON.stringify({ id, name, email }));
      localStorage.setItem("token", accessToken);
      setAuthHeader(accessToken);

      return { id, name, email, accessToken };
    } catch (error) {
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      localStorage.clear();
      setAuthHeader(null);
      return rejectWithValue(error.response?.data || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
    }
  }
);

// üìå Login user
export const loginUser = createAsyncThunk(
  "auth/login",
  async (credentials, { rejectWithValue }) => {
    try {
      const response = await api.post("/auth/login", credentials);
      const { user, accessToken } = response.data.data;

      // Store only access token and user data
      localStorage.setItem("user", JSON.stringify(user));
      localStorage.setItem("token", accessToken);
      setAuthHeader(accessToken);

      return { user, accessToken };
    } catch (error) {
      // Clear any existing tokens on login error
      localStorage.clear();
      setAuthHeader(null);
      return rejectWithValue(error.response?.data || "Login failed");
    }
  }
);

// üìå Logout user
export const logoutUser = createAsyncThunk(
  "auth/logout",
  async (_, { rejectWithValue }) => {
    try {
      await api.post("/auth/logout");
      
      localStorage.clear();
      setAuthHeader(null);
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
      window.location.href = '/login';
      return true;
    } catch (error) {
      localStorage.clear();
      setAuthHeader(null);
      // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
      window.location.href = '/login';
      return rejectWithValue("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ");
    }
  }
);

// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
export const refreshToken = createAsyncThunk(
  "auth/refreshToken",
  async (_, { rejectWithValue }) => {
    try {
      const response = await api.post("/auth/refresh");
      const { accessToken } = response.data;

      localStorage.setItem("token", accessToken);
      setAuthHeader(accessToken);

      return { accessToken };
    } catch (error) {
      localStorage.removeItem("token");
      localStorage.removeItem("user");
      setAuthHeader(null);
      return rejectWithValue("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.");
    }
  }
);
