import { createAsyncThunk } from "@reduxjs/toolkit";
import axios from "axios";

axios.defaults.baseURL = "http://localhost:3000/api";

// üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å —Ç–æ–∫–µ–Ω–æ–º
const getAuthHeader = () => {
  const token = localStorage.getItem("token");
  return token ? { headers: { Authorization: `Bearer ${token}` } } : {};
};

// üìå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
const setAuthHeader = (token) => {
  axios.defaults.headers.common["Authorization"] = `Bearer ${token}`;
};

// üìå –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ `localStorage` –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const token = localStorage.getItem("token");
if (token) setAuthHeader(token);

// üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
export const registerUser = createAsyncThunk(
  "auth/register",
  async (userData, { rejectWithValue }) => {
    try {
      const response = await axios.post("/register", userData);
      setAuthHeader(response.data.data.token);
      return response.data.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

// üìå –õ–æ–≥–∏–Ω
export const loginUser = createAsyncThunk(
  "auth/login",
  async (credentials, { rejectWithValue }) => {
    try {
      const response = await axios.post("/login", credentials);
      setAuthHeader(response.data.data.token);
      return response.data.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

// üìå –í—ã—Ö–æ–¥
export const logoutUser = createAsyncThunk(
  "auth/logout",
  async (_, { rejectWithValue }) => {
    try {
      await axios.post("/logout", null, getAuthHeader());

      axios.defaults.headers.common["Authorization"] = "";
      localStorage.removeItem("token");
      localStorage.removeItem("user");
    } catch (error) {
      return rejectWithValue(error.response?.data || "Logout failed");
    }
  }
);

// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
export const refreshToken = createAsyncThunk(
  "auth/refreshToken",
  async (_, { rejectWithValue }) => {
    try {
      const response = await axios.post("/refresh", {}, getAuthHeader());
      const newToken = response.data.accessToken;

      localStorage.setItem("token", newToken);
      setAuthHeader(newToken);

      return response.data;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
      localStorage.removeItem("token");
      localStorage.removeItem("user");
      return rejectWithValue("Session expired, please log in again");
    }
  }
);
