import { createAsyncThunk } from "@reduxjs/toolkit";
import axios from "axios";
// import { setUser } from "./authSlice.js"; 


axios.defaults.baseURL = "http://localhost:3000/api/login/api";
axios.defaults.withCredentials = true; // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–∫–∏ —Å –∑–∞–ø—Ä–æ—Å–æ–º

// üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å —Ç–æ–∫–µ–Ω–æ–º
const getAuthHeader = () => {
  const token = localStorage.getItem("token");
  return token ? { headers: { Authorization: `Bearer ${token}` } } : {};
};

// üìå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
const setAuthHeader = (token) => {
  axios.defaults.headers.common["Authorization"] = `Bearer ${token}`;
};

// üìå –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ `localStorage` –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const token = localStorage.getItem("token");
if (token) setAuthHeader(token);

// üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
export const registerUser = createAsyncThunk(
  "auth/register",
  async (userData, { rejectWithValue }) => {
    try {
      const response = await axios.post("/register", userData);
      const { user, accessToken, refreshToken } = response.data.data;

      localStorage.setItem("user", JSON.stringify(user));
      localStorage.setItem("token", accessToken);
      localStorage.setItem("refreshToken", refreshToken);

      setAuthHeader(accessToken);

      return { user, accessToken, refreshToken };
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

// üìå –õ–æ–≥–∏–Ω


// üìå –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const loginUser = createAsyncThunk(
  "auth/login",
  async (credentials, { rejectWithValue }) => {
    try {
      const response = await axios.post("/login", credentials);

      console.log("üü¢ Server Response:", response.data); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä

      const { user, accessToken, refreshToken } = response.data.data;

      if (!user || !user.email) {
        throw new Error("Invalid user data received");
      }

      localStorage.setItem("user", JSON.stringify(user));
      localStorage.setItem("token", accessToken);
      localStorage.setItem("refreshToken", refreshToken);

      return { user, accessToken, refreshToken };
    } catch (error) {
      console.error("üö® Login error:", error.response?.data || error.message);
      return rejectWithValue(error.response?.data || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
    }
  }
);


export const logoutUser = createAsyncThunk(
  "auth/logout",
  async (_, { rejectWithValue }) => {
    try {
      console.log("Sending logout request with cookies:", document.cookie);

      const refreshToken = localStorage.getItem("refreshToken");

      const response = await axios.post(
        "/logout",
        {},
        {
          withCredentials: true,
          headers: refreshToken
            ? { Authorization: `Bearer ${refreshToken}` }
            : {},
        }
      );

      // üßπ –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      localStorage.removeItem("accessToken");
      localStorage.removeItem("refreshToken");
      localStorage.removeItem("user");
      sessionStorage.clear();
      delete axios.defaults.headers.common["Authorization"];

      console.log("‚úÖ Logout successful:", response.data);
      console.log("Cookies after logout:", document.cookie);

      return response.data;
    } catch (error) {
      console.error("üö® Logout error:", error.response?.data || error.message);
      return rejectWithValue(error.response?.data?.message || "–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞");
    }
  }
);



// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
export const refreshToken = createAsyncThunk(
  "auth/refreshToken",
  async (_, { rejectWithValue }) => {
    try {
      const response = await axios.post("/refresh", {}, getAuthHeader());
      const newToken = response.data.accessToken;

      localStorage.setItem("token", newToken);
      setAuthHeader(newToken);

      return response.data;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
      localStorage.removeItem("token");
      localStorage.removeItem("user");
      return rejectWithValue("Session expired, please log in again");
    }
  }
);
