import { createAsyncThunk } from "@reduxjs/toolkit";
import api from "../axiosInstance"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π api

// üìå GET: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
export const fetchCustomers = createAsyncThunk(
  "customers/fetchAll",
  async (_, { rejectWithValue }) => {
    try {
      const response = await api.get("/customers"); // –ò—Å–ø–æ–ª—å–∑—É–µ–º api –≤–º–µ—Å—Ç–æ axios
      return response.data;
    } catch (error) {
      console.error(
        "Fetch customers error:",
        error.response?.data || error.message
      );
      return rejectWithValue(
        error.response?.data || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤"
      );
    }
  }
);

// üìå POST: –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
export const addCustomer = createAsyncThunk(
  "customers/add",
  async (customerData, { dispatch, rejectWithValue }) => {
    try {
      const response = await api.post("/customers", customerData); // –ò—Å–ø–æ–ª—å–∑—É–µ–º api
      dispatch(fetchCustomers()); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
      return response.data;
    } catch (error) {
      console.error(
        "Add customer error:",
        error.response?.data || error.message
      );
      return rejectWithValue(
        error.response?.data || "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"
      );
    }
  }
);

// üìå PUT: –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
export const updateCustomer = createAsyncThunk(
  "customers/update",
  async ({ id, customerData }, { dispatch, rejectWithValue }) => {
    try {
      const response = await api.put(`/customers/${id}`, customerData); // –ò—Å–ø–æ–ª—å–∑—É–µ–º api
      dispatch(fetchCustomers()); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      return response.data;
    } catch (error) {
      console.error(
        "Update customer error:",
        error.response?.data || error.message
      );
      return rejectWithValue(
        error.response?.data || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"
      );
    }
  }
);

// üìå DELETE: –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
export const deleteCustomer = createAsyncThunk(
  "customers/delete",
  async (id, { dispatch, rejectWithValue }) => {
    try {
      await api.delete(`/customers/${id}`); // –ò—Å–ø–æ–ª—å–∑—É–µ–º api
      dispatch(fetchCustomers()); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      return id;
    } catch (error) {
      console.error(
        "Delete customer error:",
        error.response?.data || error.message
      );
      return rejectWithValue(error.response?.data || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞");
    }
  }
);
