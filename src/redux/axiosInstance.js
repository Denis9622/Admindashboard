import axios from "axios";
import { store } from "./store"; // –ò–º–ø–æ—Ä—Ç –≤–∞—à–µ–≥–æ Redux store
import { refreshToken } from "./auth/authOperations"; // –ò–º–ø–æ—Ä—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞

const api = axios.create({
  baseURL: "http://localhost:3000/api",
  withCredentials: true, // –ü–µ—Ä–µ–¥–∞—á–∞ HTTPOnly –∫—É–∫–∏
});

// üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
const setAuthHeader = (token) => {
  if (token) {
    api.defaults.headers.common["Authorization"] = `Bearer ${token}`;
  } else {
    delete api.defaults.headers.common["Authorization"];
  }
};

// üìå –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
const token = localStorage.getItem("token");
if (token && token !== "undefined") {
  setAuthHeader(token);
}

// üîÑ –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ 401)
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º 401 –æ—à–∏–±–∫—É –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      try {
        await store.dispatch(refreshToken());
        const newToken = localStorage.getItem("token");
        originalRequest.headers["Authorization"] = `Bearer ${newToken}`;
        return api(originalRequest);
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", err);
        localStorage.removeItem("token");
        localStorage.removeItem("refreshToken");
        return Promise.reject(err);
      }
    }

    return Promise.reject(error);
  }
);

export default api;
export { setAuthHeader };
